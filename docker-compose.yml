version: "3.8"

networks:
  bi_network:
    driver: bridge

volumes:
  db_data:
  model_cache:

services:
  backend:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: bi-backend
    ports:
      - "8000:8000"
    volumes:
      - .:/app
      - model_cache:/root/.cache/torch/sentence_transformers  # Cache models
    environment:
      - PYTHONUNBUFFERED=1
      - EMBEDDING_MODEL_NAME=all-MiniLM-L6-v2
      - LLM_MODEL_NAME=gpt2
      - LOG_LEVEL=INFO
      - DB_HOST=db
      - DB_PORT=5432
      - DB_USER=user
      - DB_PASSWORD=password
      - DB_NAME=bi_db
    depends_on:
      - db
    networks:
      - bi_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    command: ["uvicorn", "backend.app:app", "--host", "0.0.0.0", "--port", "8000"]

  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    container_name: bi-frontend
    volumes:
      - .:/app
    environment:
      - PYTHONUNBUFFERED=1
      - BACKEND_URL=http://backend:8000
    ports:
      - "8501:8501"
    depends_on:
      - backend
    networks:
      - bi_network
    restart: unless-stopped
    command: ["streamlit", "run", "frontend/streamlit_app.py", "--server.port", "8501", "--server.address", "0.0.0.0"]

  db:   
    image: postgres:14-alpine
    container_name: bi-db
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: bi_db
    ports:
      - "5432:5432"
    volumes:
      - db_data:/var/lib/postgresql/data
    networks:
      - bi_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d bi_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  prometheus:
    image: prom/prometheus:latest
    container_name: bi-prometheus
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - bi_network
    restart: unless-stopped
    depends_on:
      - backend

  grafana:
    image: grafana/grafana:latest
    container_name: bi-grafana
    volumes:
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    networks:
      - bi_network
    restart: unless-stopped
    depends_on:
      - prometheus